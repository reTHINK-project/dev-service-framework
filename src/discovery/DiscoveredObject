/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

import {divideURL, convertToUserURL} from '../utils/utils';

/**
* Discovered Object interface
*/
class DiscoveredObject {

  get data() {
    return this._data;
  }

  constructor (data, runtimeURL, discoveryURL, msgBus) {
    this._data = data;
    this._runtimeURL = runtimeURL;
    this._discoveredObjectURL = discoveryURL + '/discoveredobject/';
    this._messageBus = msgBus;
    this._subscribers = {
      live: {},
      disconnected: {}
    };
  }

  onLive(url, subscriber, callback) {
    this._subscribers.live[subscriber] = callback;

    //Send message to the NotificationManager through MessageBus
    const msg = {
      type: 'subscribe',
      from: this._discoveredObjectURL,
      to: this._runtimeURL + '/nm/',
      body: {
        subscribe: url,
        status: 'live'
      }
    };

    return new Promise(function(resolve, reject) {

      this._messageBus.postMessage(msg, (reply) => {
        console.log("[DiscoveredObject.onLive] rcved reply ", reply);
        //What should happen here? Update map?

        if(reply.body.code === 200)
          resolve();
        else
          reject();
      });
    });
  }

  onDisconnected(url, subscriber, callback) {
    this._subscribers.disconnected[subscriber] = callback;

    //Send message to the NotificationManager through MessageBus
    const msg = {
      type: 'subscribe',
      from: this._discoveredObjectURL,
      to: this._runtimeURL + '/nm/',
      body: {
        subscribe: url,
        status: 'disconnected'
      }
    };

    return new Promise(function(resolve, reject) {

      this._messageBus.postMessage(msg, (reply) => {
        console.log("[DiscoveredObject.onDisconnected] rcved reply ", reply);
        //What should happen here? Update map?

        if(reply.body.code === 200)
          resolve();
        else
          reject();
      });
    });
  }

}
